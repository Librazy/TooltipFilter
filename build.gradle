import java.text.SimpleDateFormat
import groovy.json.*

// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name 'forge'
            url 'http://files.minecraftforge.net/maven'
        }

        maven {
            name 'sonatype-snapshots'
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

version = "0.1.0.%s"
group= "org.librazy.tooltipfilter" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TooltipFilter-" + System.getenv("TRAVIS_BRANCH")

if (System.getenv("TRAVIS_BUILD_NUMBER") != null) {
    version = String.format(version, System.getenv("TRAVIS_BUILD_NUMBER"))
} else {
    version = String.format(version, "0")
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

minecraft {
    version = "1.12.2-14.23.2.2631"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180320"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replaceIn "org/librazy/tooltipfilter/TooltipFilter.java"
    replace "@VERSION@", project.version
    replace "@BUILD_TIME@", buildTime
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

repositories {
    jcenter()
    maven {
        name 'forge'
        url 'http://files.minecraftforge.net/maven'
    }

    maven {
        name 'sonatype-snapshots'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    compile 'org.jetbrains:annotations:15.0'
    compile 'org.yaml:snakeyaml:1.19-SNAPSHOT'
    extraLibs 'org.yaml:snakeyaml:1.19-SNAPSHOT'
}

processResources 
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def static getBuildTime() {
    def date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z")
    date.setTimeZone(TimeZone.getTimeZone("UTC"))
    return date.format(new Date())
}

task updateForgeJson {
    doLast {
        def page = "https://github.com/Librazy/TooltipFilter/releases"
        if (System.getenv("FORGE_RELEASE_HOMEPAGE") != null) {
            page = System.getenv("FORGE_RELEASE_HOMEPAGE")
        } else if(System.getenv("GIT_ORIGIN_URL") != null) {
            page = System.getenv("GIT_ORIGIN_URL").replace(".git", "") + "/Releases"
        }
        exec {
            executable = 'git'
            args = [ 'remote', 'set-branches', '--add', 'origin', 'update' ]
        }
        exec {
            executable = 'git'
            args = [ 'fetch', '--all' ]
        }
        exec {
            executable = 'git'
            args = [ 'checkout', 'update' ]
        }
        def updateFile = new File('update.json')
        def json
        if (updateFile.exists()) {
            json = new JsonSlurper().parseText(updateFile.getText())
        }
        else {
            def builder = new JsonBuilder()
            json = builder(
                    homepage: page,
                    promos: new HashMap<>()
            )
        }
        exec {
            executable = 'git'
            args = [ 'checkout', project.minecraft.version]
        }
        def outStream = new ByteArrayOutputStream()
        exec {
            executable = 'git'
            args = [ 'log', '-n', '1', "--format='%B'"]
            standardOutput = outStream
        }
        def fullLog = outStream.toString().replaceAll("^\\s*'\\s*|\\s*'\\s*\$", "").replaceAll("[\\r\\n]+", "\n")
        json['homepage'] = page
        json['promos'][project.minecraft.version + '-latest'] = project.version
        if(fullLog.startsWith("[recommended]")){
            json['promos'][project.minecraft.version + '-recommended'] = project.version
		}
        exec {
            executable = 'git'
            args = [ 'checkout', 'update']
        }
        def writeFile = new File('update.json')
        if (!json.containsKey(project.minecraft.version)) json.put(project.minecraft.version, new HashMap<>())
        def version = json[project.minecraft.version]
        version.put(project.version, fullLog)
        writeFile.write JsonOutput.prettyPrint(JsonOutput.toJson(json))
        exec {
            executable = 'git'
            args = [ 'add', '.']
        }
        exec {
            executable = 'git'
            args = [ 'commit', '-m', 'Generated update.json']
        }
        exec {
            executable = 'git'
            args = [ 'checkout', project.minecraft.version]
        }
    }
}

compileJava {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}